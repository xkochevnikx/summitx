import { logger } from "./pinoConfig";
import { sentryCaptureExceptionFailsafe } from "./sentryCapture";

/**
 * –°–æ–∑–¥–∞–µ—Ç –º–µ—Ç–æ–¥ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –æ—à–∏–±–æ–∫.
 *
 * @template A - –¢–∏–ø –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏.
 * @template R - –¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–∏.
 * @param {Object} options - –û–ø—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
 * @param {string} [options.msg] - –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–æ–≤.
 * @param {(args: A) => unknown} [options.logArgs] - –õ–æ–≥–∏—Ä—É–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏.
 * @param {(res: R, args: A) => unknown} [options.logRes] - –õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏.
 * @returns {Function} - –§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
 */
export const loggedMethod = <A extends any[] = any[], R = any>({
    msg,
    logRes,
    logArgs,
}: {
    msg?: string;
    logArgs?: (...args: A) => unknown;
    logRes?: (res: R, ...args: A) => unknown;
}) => {
    return function <T extends (...args: A) => Promise<R>>(target: T) {
        return async function (...args: Parameters<T>): Promise<ReturnType<T> | void> {
            const methodName = target.name;

            logger.info({
                methodName,
                msg: `‚úÖ –í—ã–∑–æ–≤ ${methodName}: ${msg ?? ""}`,
                args: logArgs?.(...args),
            });

            try {
                const result = await target(...args);

                logger.info({
                    methodName,
                    msg: `üöÄ –†–µ–∑—É–ª—å—Ç–∞—Ç ${methodName}: ${msg ?? ""}`,
                    data: logRes?.(result as R, ...args),
                });

                return result as ReturnType<T>;
            } catch (error: unknown) {
                logger.error({
                    methodName,
                    msg: `‚õîÔ∏è –û—à–∏–±–∫–∞ ${methodName}: ${msg ?? ""}`,
                    error,
                });
                sentryCaptureExceptionFailsafe(error);
                return;
            }
        };
    };
};
