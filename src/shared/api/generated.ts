/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Summit-X
 * Summit-X is the project about mountains and mountaineers
 * OpenAPI spec version: 0.1.13
 */
import { createInstance } from "./api-instanse";
export type UserListParams = {
    /**
     * JSON-encoded array of requested range. Example: [0, 9]
     */
    range?: string;
    /**
     * JSON-encoded array which specifies results ordering. First value is order field and the second is direction. Example: ["id", "ASC"]
     */
    sort?: string;
    /**
     * Quick filter string. Not all backend endpoints are able to process it
     */
    q?: string;
};

export type MountainRangesListParams = {
    /**
     * JSON-encoded array of requested range. Example: [0, 9]
     */
    range?: string;
    /**
     * JSON-encoded array which specifies results ordering. First value is order field and the second is direction. Example: ["id", "ASC"]
     */
    sort?: string;
    /**
     * Quick filter string. Not all backend endpoints are able to process it
     */
    q?: string;
    /**
     * Filters to apply. JSON object of type **GeodataMountainRangeListFilter**
     */
    filter: ReactAdminJsonQueryParamJSONValue;
    /**
     * Language in ISO 639-2 format
     */
    locale_lang?: LocaleApiIsolangLanguage;
    /**
     * Metric system to use
     */
    metric_system?: LocaleMetricSystem;
};

export type MountainPassesListParams = {
    /**
     * JSON-encoded array of requested range. Example: [0, 9]
     */
    range?: string;
    /**
     * JSON-encoded array which specifies results ordering. First value is order field and the second is direction. Example: ["id", "ASC"]
     */
    sort?: string;
    /**
     * Quick filter string. Not all backend endpoints are able to process it
     */
    q?: string;
    /**
     * Filters to apply. JSON object of type **GeodataMountainPassListFilter**
     */
    filter: ReactAdminJsonQueryParamJSONValue;
    /**
     * Language in ISO 639-2 format
     */
    locale_lang?: LocaleApiIsolangLanguage;
    /**
     * Metric system to use
     */
    metric_system?: LocaleMetricSystem;
};

export type MountainsListParams = {
    /**
     * JSON-encoded array of requested range. Example: [0, 9]
     */
    range?: string;
    /**
     * JSON-encoded array which specifies results ordering. First value is order field and the second is direction. Example: ["id", "ASC"]
     */
    sort?: string;
    /**
     * Quick filter string. Not all backend endpoints are able to process it
     */
    q?: string;
    /**
     * Filters to apply. JSON object of type **GeodataMountainListFilter**
     */
    filter: ReactAdminJsonQueryParamJSONValue;
    /**
     * Language in ISO 639-2 format
     */
    locale_lang?: LocaleApiIsolangLanguage;
    /**
     * Metric system to use
     */
    metric_system?: LocaleMetricSystem;
};

export type GlaciersListParams = {
    /**
     * JSON-encoded array of requested range. Example: [0, 9]
     */
    range?: string;
    /**
     * JSON-encoded array which specifies results ordering. First value is order field and the second is direction. Example: ["id", "ASC"]
     */
    sort?: string;
    /**
     * Quick filter string. Not all backend endpoints are able to process it
     */
    q?: string;
    /**
     * Filters to apply. JSON object of type **GeodataGlacierListFilter**
     */
    filter: ReactAdminJsonQueryParamJSONValue;
    /**
     * Language in ISO 639-2 format
     */
    locale_lang?: LocaleApiIsolangLanguage;
    /**
     * Metric system to use
     */
    metric_system?: LocaleMetricSystem;
};

export type CountryRegionsListParams = {
    /**
     * JSON-encoded array of requested range. Example: [0, 9]
     */
    range?: string;
    /**
     * JSON-encoded array which specifies results ordering. First value is order field and the second is direction. Example: ["id", "ASC"]
     */
    sort?: string;
    /**
     * Quick filter string. Not all backend endpoints are able to process it
     */
    q?: string;
    /**
     * Filters to apply. JSON object of type **GeodataCountryRegionListFilter**
     */
    filter: ReactAdminJsonQueryParamJSONValue;
    /**
     * Language in ISO 639-2 format
     */
    locale_lang?: LocaleApiIsolangLanguage;
    /**
     * Metric system to use
     */
    metric_system?: LocaleMetricSystem;
};

export type CountryParams = {
    /**
     * Language in ISO 639-2 format
     */
    locale_lang?: LocaleApiIsolangLanguage;
    /**
     * Metric system to use
     */
    metric_system?: LocaleMetricSystem;
};

export type CountriesListParams = {
    /**
     * JSON-encoded array of requested range. Example: [0, 9]
     */
    range?: string;
    /**
     * JSON-encoded array which specifies results ordering. First value is order field and the second is direction. Example: ["id", "ASC"]
     */
    sort?: string;
    /**
     * Quick filter string. Not all backend endpoints are able to process it
     */
    q?: string;
    /**
     * Filters to apply. JSON object of type **GeodataCountryListFilter**
     */
    filter: ReactAdminJsonQueryParamJSONValue;
    /**
     * Language in ISO 639-2 format
     */
    locale_lang?: LocaleApiIsolangLanguage;
    /**
     * Metric system to use
     */
    metric_system?: LocaleMetricSystem;
};

export type ObjectListParams = {
    /**
     * JSON-encoded array of requested range. Example: [0, 9]
     */
    range?: string;
    /**
     * JSON-encoded array which specifies results ordering. First value is order field and the second is direction. Example: ["id", "ASC"]
     */
    sort?: string;
    /**
     * Quick filter string. Not all backend endpoints are able to process it
     */
    q?: string;
    /**
     * Language in ISO 639-2 format
     */
    locale_lang?: LocaleApiIsolangLanguage;
    /**
     * Metric system to use
     */
    metric_system?: LocaleMetricSystem;
};

/**
 * This value should be kept in secret. On the server side, it will be hidden from logs
 */
export type WebappCoreSecstrSecUtf8 = string;

/**
 * JSON-encoded object
 */
export type ReactAdminJsonQueryParamJSONValue = string;

/**
 * Empty response object on success
 */
export interface ReactAdminOKResponse {
    [key: string]: unknown;
}

export interface LocaleApiQuantitiesLength {
    /** Amount */
    amount: number;
    /** Human readable length */
    string: string;
    /** Unit */
    unit: string;
}

export interface LocaleApiQuantitiesArea {
    /** Amount */
    amount: number;
    /** Human readable area */
    string: string;
    /** Unit */
    unit: string;
}

/**
 * String with information about it's language
 */
export interface LocaleApiLocaleLocalizedString {
    /** 3-letter language code, according to ISO 639-2 */
    lang: string;
    /** String value */
    value: string;
}

/**
 * Localized name
 */
export type LocaleApiLocaleGeoNameValueAnyOfTwo = {
    LocalString?: LocaleApiLocaleLocalizedString;
};

/**
 * Name without knowledge about it's localization
 */
export type LocaleApiLocaleGeoNameValueAnyOf = {
    /** Unlocalized name */
    String?: string;
};

export type LocaleApiLocaleGeoNameValue =
    | LocaleApiLocaleGeoNameValueAnyOf
    | LocaleApiLocaleGeoNameValueAnyOfTwo;

/**
 * Kind of the name
 */
export type LocaleApiLocaleGeoNameKind =
    (typeof LocaleApiLocaleGeoNameKind)[keyof typeof LocaleApiLocaleGeoNameKind];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LocaleApiLocaleGeoNameKind = {
    Main: "Main",
    Old: "Old",
    Alt: "Alt",
    International: "International",
    Local: "Local",
    National: "National",
    Official: "Official",
} as const;

/**
 * Name of geographical object
 */
export interface LocaleApiLocaleGeoName {
    /** Kind of the name */
    kind: LocaleApiLocaleGeoNameKind;
    value: LocaleApiLocaleGeoNameValue;
}

/**
 * Language code according to ISO 639-2
 */
export type LocaleApiIsolangLanguage = string;

export type MountainRangeParams = {
    /**
     * Language in ISO 639-2 format
     */
    locale_lang?: LocaleApiIsolangLanguage;
    /**
     * Metric system to use
     */
    metric_system?: LocaleMetricSystem;
};

export type MountainPassParams = {
    /**
     * Language in ISO 639-2 format
     */
    locale_lang?: LocaleApiIsolangLanguage;
    /**
     * Metric system to use
     */
    metric_system?: LocaleMetricSystem;
};

export type MountainParams = {
    /**
     * Language in ISO 639-2 format
     */
    locale_lang?: LocaleApiIsolangLanguage;
    /**
     * Metric system to use
     */
    metric_system?: LocaleMetricSystem;
};

export type GlacierParams = {
    /**
     * Language in ISO 639-2 format
     */
    locale_lang?: LocaleApiIsolangLanguage;
    /**
     * Metric system to use
     */
    metric_system?: LocaleMetricSystem;
};

export type CountryRegionParams = {
    /**
     * Language in ISO 639-2 format
     */
    locale_lang?: LocaleApiIsolangLanguage;
    /**
     * Metric system to use
     */
    metric_system?: LocaleMetricSystem;
};

export type GeodataApiApiTypesObjectPropertiesVolcanoType =
    (typeof GeodataApiApiTypesObjectPropertiesVolcanoType)[keyof typeof GeodataApiApiTypesObjectPropertiesVolcanoType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GeodataApiApiTypesObjectPropertiesVolcanoType = {
    Stratovolcano: "Stratovolcano",
    Shield: "Shield",
    Scoria: "Scoria",
} as const;

export type GeodataApiApiTypesObjectPropertiesVolcanoStatus =
    (typeof GeodataApiApiTypesObjectPropertiesVolcanoStatus)[keyof typeof GeodataApiApiTypesObjectPropertiesVolcanoStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GeodataApiApiTypesObjectPropertiesVolcanoStatus = {
    Active: "Active",
    Dormant: "Dormant",
    Extinct: "Extinct",
} as const;

/**
 * @nullable
 */
export type GeodataApiApiTypesObjectPropertiesVolcanoVolcanoType =
    GeodataApiApiTypesObjectPropertiesVolcanoType | null;

/**
 * @nullable
 */
export type GeodataApiApiTypesObjectPropertiesVolcanoStatusProperty =
    GeodataApiApiTypesObjectPropertiesVolcanoStatus | null;

export interface GeodataApiApiTypesObjectPropertiesVolcano {
    /** @nullable */
    status?: GeodataApiApiTypesObjectPropertiesVolcanoStatusProperty;
    /** @nullable */
    volcano_type?: GeodataApiApiTypesObjectPropertiesVolcanoVolcanoType;
}

export type GeodataApiApiResponseTypesGeodataObjectResponseOneOfSix = {
    Glacier: GeodataApiApiResponseTypesGeodataGlacierResponse;
};

export type GeodataApiApiResponseTypesGeodataObjectResponseOneOfFive = {
    CountryRegion: GeodataApiApiResponseTypesGeodataCountryRegionResponse;
};

export type GeodataApiApiResponseTypesGeodataObjectResponseOneOfFour = {
    Country: GeodataApiApiResponseTypesGeodataCountryResponse;
};

export type GeodataApiApiResponseTypesGeodataObjectResponseOneOfThree = {
    MountainPass: GeodataApiApiResponseTypesGeodataMountainPassResponse;
};

export type GeodataApiApiResponseTypesGeodataObjectResponseOneOfTwo = {
    MountainRange: GeodataApiApiResponseTypesGeodataMountainRangeResponse;
};

export type GeodataApiApiResponseTypesGeodataObjectResponseOneOf = {
    Mountain: GeodataApiApiResponseTypesGeodataMountainResponse;
};

/**
 * Any geodata object
 */
export type GeodataApiApiResponseTypesGeodataObjectResponse =
    | GeodataApiApiResponseTypesGeodataObjectResponseOneOf
    | GeodataApiApiResponseTypesGeodataObjectResponseOneOfTwo
    | GeodataApiApiResponseTypesGeodataObjectResponseOneOfThree
    | GeodataApiApiResponseTypesGeodataObjectResponseOneOfFour
    | GeodataApiApiResponseTypesGeodataObjectResponseOneOfFive
    | GeodataApiApiResponseTypesGeodataObjectResponseOneOfSix;

/**
 * @nullable
 */
export type GeodataApiApiResponseTypesGeodataMountainResponseVolcano =
    GeodataApiApiTypesObjectPropertiesVolcano | null;

/**
 * @nullable
 */
export type GeodataApiApiResponseTypesGeodataMountainResponseProminence =
    LocaleApiQuantitiesLength | null;

/**
 * @nullable
 */
export type GeodataApiApiResponseTypesGeodataMountainResponseParentMountainRange =
    GeodataApiApiResponseTypesGeodataMountainRangeResponse | null;

/**
 * @nullable
 */
export type GeodataApiApiResponseTypesGeodataMountainResponseParentCountryRegion =
    GeodataApiApiResponseTypesGeodataCountryRegionResponse | null;

/**
 * @nullable
 */
export type GeodataApiApiResponseTypesGeodataMountainResponseElevation =
    LocaleApiQuantitiesLength | null;

/**
 * @nullable
 */
export type GeodataApiApiResponseTypesGeodataMountainResponseDescription =
    LocaleApiLocaleLocalizedString | null;

/**
 * Element of mountain ranges list
 */
export interface GeodataApiApiResponseTypesGeodataMountainResponse {
    /** Alternative names */
    alternative_names?: LocaleApiLocaleGeoName[];
    /** @nullable */
    description?: GeodataApiApiResponseTypesGeodataMountainResponseDescription;
    /** @nullable */
    elevation?: GeodataApiApiResponseTypesGeodataMountainResponseElevation;
    /** Mountain ID */
    id: number;
    /**
     * Default mountain name
     * @nullable
     */
    object_name?: string | null;
    /** @nullable */
    parent_country_region?: GeodataApiApiResponseTypesGeodataMountainResponseParentCountryRegion;
    /** @nullable */
    parent_mountain_range?: GeodataApiApiResponseTypesGeodataMountainResponseParentMountainRange;
    /** @nullable */
    prominence?: GeodataApiApiResponseTypesGeodataMountainResponseProminence;
    /** @nullable */
    volcano?: GeodataApiApiResponseTypesGeodataMountainResponseVolcano;
}

/**
 * @nullable
 */
export type GeodataApiApiResponseTypesGeodataMountainRangeResponseDescription =
    LocaleApiLocaleLocalizedString | null;

/**
 * @nullable
 */
export type GeodataApiApiResponseTypesGeodataMountainRangeResponseAreaStatistics =
    GeodataApiApiResponseTypesGeodataAreaStatistics | null;

/**
 * @nullable
 */
export type GeodataApiApiResponseTypesGeodataMountainRangeResponseArea =
    LocaleApiQuantitiesArea | null;

/**
 * Element of mountain ranges list
 */
export interface GeodataApiApiResponseTypesGeodataMountainRangeResponse {
    /** Alternative names */
    alternative_names?: LocaleApiLocaleGeoName[];
    /** @nullable */
    area?: GeodataApiApiResponseTypesGeodataMountainRangeResponseArea;
    /** @nullable */
    area_statistics?: GeodataApiApiResponseTypesGeodataMountainRangeResponseAreaStatistics;
    /** @nullable */
    description?: GeodataApiApiResponseTypesGeodataMountainRangeResponseDescription;
    /** Mountain range ID */
    id: number;
    /**
     * Default object name
     * @nullable
     */
    object_name?: string | null;
    /**
     * Parent ID
     * @nullable
     */
    parent_id?: number | null;
}

/**
 * Mountain range scale information
 */
export interface GeodataApiApiResponseTypesGeodataMountainPassScale {
    /** Maximum known grade */
    max: string;
    /** Minimum known grade */
    min: string;
}

/**
 * @nullable
 */
export type GeodataApiApiResponseTypesGeodataMountainPassResponseScale =
    GeodataApiApiResponseTypesGeodataMountainPassScale | null;

/**
 * @nullable
 */
export type GeodataApiApiResponseTypesGeodataMountainPassResponseParentMountainRange =
    GeodataApiApiResponseTypesGeodataMountainRangeResponse | null;

/**
 * @nullable
 */
export type GeodataApiApiResponseTypesGeodataMountainPassResponseParentCountryRegion =
    GeodataApiApiResponseTypesGeodataCountryRegionResponse | null;

/**
 * @nullable
 */
export type GeodataApiApiResponseTypesGeodataMountainPassResponseElevation =
    LocaleApiQuantitiesLength | null;

/**
 * @nullable
 */
export type GeodataApiApiResponseTypesGeodataMountainPassResponseDescription =
    LocaleApiLocaleLocalizedString | null;

/**
 * Element of mountain ranges list
 */
export interface GeodataApiApiResponseTypesGeodataMountainPassResponse {
    /** Alternative names */
    alternative_names?: LocaleApiLocaleGeoName[];
    /** @nullable */
    description?: GeodataApiApiResponseTypesGeodataMountainPassResponseDescription;
    /** @nullable */
    elevation?: GeodataApiApiResponseTypesGeodataMountainPassResponseElevation;
    /** Mountain pass ID */
    id: number;
    /**
     * Default mountain pass name
     * @nullable
     */
    object_name?: string | null;
    /** @nullable */
    parent_country_region?: GeodataApiApiResponseTypesGeodataMountainPassResponseParentCountryRegion;
    /** @nullable */
    parent_mountain_range?: GeodataApiApiResponseTypesGeodataMountainPassResponseParentMountainRange;
    /** @nullable */
    scale?: GeodataApiApiResponseTypesGeodataMountainPassResponseScale;
}

/**
 * @nullable
 */
export type GeodataApiApiResponseTypesGeodataGlacierResponseParentMountainRange =
    GeodataApiApiResponseTypesGeodataMountainRangeResponse | null;

/**
 * @nullable
 */
export type GeodataApiApiResponseTypesGeodataGlacierResponseParentCountryRegion =
    GeodataApiApiResponseTypesGeodataCountryRegionResponse | null;

/**
 * @nullable
 */
export type GeodataApiApiResponseTypesGeodataGlacierResponseDescription =
    LocaleApiLocaleLocalizedString | null;

/**
 * @nullable
 */
export type GeodataApiApiResponseTypesGeodataGlacierResponseAreaStatistics =
    GeodataApiApiResponseTypesGeodataAreaStatistics | null;

/**
 * @nullable
 */
export type GeodataApiApiResponseTypesGeodataGlacierResponseArea = LocaleApiQuantitiesArea | null;

/**
 * Element of glaciers list
 */
export interface GeodataApiApiResponseTypesGeodataGlacierResponse {
    /** Alternative names */
    alternative_names?: LocaleApiLocaleGeoName[];
    /** @nullable */
    area?: GeodataApiApiResponseTypesGeodataGlacierResponseArea;
    /** @nullable */
    area_statistics?: GeodataApiApiResponseTypesGeodataGlacierResponseAreaStatistics;
    /** @nullable */
    description?: GeodataApiApiResponseTypesGeodataGlacierResponseDescription;
    /** Glacier ID */
    id: number;
    /**
     * Default object name
     * @nullable
     */
    object_name?: string | null;
    /** @nullable */
    parent_country_region?: GeodataApiApiResponseTypesGeodataGlacierResponseParentCountryRegion;
    /**
     * Parent ID
     * @nullable
     */
    parent_id?: number | null;
    /** @nullable */
    parent_mountain_range?: GeodataApiApiResponseTypesGeodataGlacierResponseParentMountainRange;
}

/**
 * @nullable
 */
export type GeodataApiApiResponseTypesGeodataCountryResponseDescription =
    LocaleApiLocaleLocalizedString | null;

/**
 * @nullable
 */
export type GeodataApiApiResponseTypesGeodataCountryResponseArea = LocaleApiQuantitiesArea | null;

/**
 * Element of countries list
 */
export interface GeodataApiApiResponseTypesGeodataCountryResponse {
    /** Alternative names */
    alternative_names?: LocaleApiLocaleGeoName[];
    /** @nullable */
    area?: GeodataApiApiResponseTypesGeodataCountryResponseArea;
    /** @nullable */
    area_statistics?: GeodataApiApiResponseTypesGeodataCountryResponseAreaStatistics;
    /** @nullable */
    description?: GeodataApiApiResponseTypesGeodataCountryResponseDescription;
    /** Country ID */
    id: number;
    /**
     * Default object name
     * @nullable
     */
    object_name?: string | null;
    /**
     * Parent ID
     * @nullable
     */
    parent_id?: number | null;
}

/**
 * @nullable
 */
export type GeodataApiApiResponseTypesGeodataCountryRegionResponseDescription =
    LocaleApiLocaleLocalizedString | null;

/**
 * @nullable
 */
export type GeodataApiApiResponseTypesGeodataCountryRegionResponseArea =
    LocaleApiQuantitiesArea | null;

/**
 * Element of country regions list
 */
export interface GeodataApiApiResponseTypesGeodataCountryRegionResponse {
    /** Alternative names */
    alternative_names?: LocaleApiLocaleGeoName[];
    /** @nullable */
    area?: GeodataApiApiResponseTypesGeodataCountryRegionResponseArea;
    /** @nullable */
    area_statistics?: GeodataApiApiResponseTypesGeodataCountryRegionResponseAreaStatistics;
    /** @nullable */
    description?: GeodataApiApiResponseTypesGeodataCountryRegionResponseDescription;
    /** Country region ID */
    id: number;
    /**
     * Default object name
     * @nullable
     */
    object_name?: string | null;
    /**
     * Parent ID
     * @nullable
     */
    parent_id?: number | null;
}

export interface GeodataApiApiResponseTypesGeodataAreaStatistics {
    glaciers_area: LocaleApiQuantitiesArea;
    /** Glaciers count */
    glaciers_count: number;
    /** Mountain passes count */
    mountain_passes_count: number;
    /** Mountains count */
    mountains_count: number;
}

/**
 * @nullable
 */
export type GeodataApiApiResponseTypesGeodataCountryResponseAreaStatistics =
    GeodataApiApiResponseTypesGeodataAreaStatistics | null;

/**
 * @nullable
 */
export type GeodataApiApiResponseTypesGeodataCountryRegionResponseAreaStatistics =
    GeodataApiApiResponseTypesGeodataAreaStatistics | null;

/**
 * Element of user list
 */
export interface UserListResponse {
    /** When user was created */
    create_date: string;
    /** Internal user ID */
    id: number;
    /**
     * When authenticated user used API last time
     * @nullable
     */
    last_seen_date?: string | null;
    /** Total number of times user ever logged in */
    login_count: number;
    /** User person */
    person: string;
    /** Username */
    username: string;
}

/**
 * Element of user list
 */
export interface UserInfoResponse {
    /** Active user sessions count */
    active_sessions: number;
    /** When user was created */
    create_date: string;
    /** Internal user ID */
    id: number;
    /**
     * When authenticated user used API last time
     * @nullable
     */
    last_seen_date?: string | null;
    /** Total number of times user ever logged in */
    login_count: number;
    /** User person */
    person: string;
    /** Username */
    username: string;
}

/**
 * Order direction for paginated list output
 */
export type OrderDirection = (typeof OrderDirection)[keyof typeof OrderDirection];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrderDirection = {
    ASC: "ASC",
    DESC: "DESC",
} as const;

/**
 * Metric system to use in the response
 */
export type LocaleMetricSystem = (typeof LocaleMetricSystem)[keyof typeof LocaleMetricSystem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LocaleMetricSystem = {
    Metric: "Metric",
    Imperial: "Imperial",
} as const;

/**
 * Which language and metric system to use in the response
 */
export interface LocaleRequest {
    /** Language in ISO 639-2 format */
    locale_lang?: string;
    metric_system?: LocaleMetricSystem;
}

/**
 * Filter to apply to mountain ranges list
 */
export interface GeodataMountainRangeListFilter {
    /**
   * Parent object: mountain ranges, countries, etc. If null, filter will not be applied. If empty list, only
toplevel mountain ranges will be returned
   * @nullable
   */
    parent_id?: number[] | null;
}

/**
 * Filter to apply to mountain passes list
 */
export interface GeodataMountainPassListFilter {
    parent_id?: number[];
}

/**
 * Filter to apply to mountains list
 */
export interface GeodataMountainListFilter {
    parent_id?: number[];
}

/**
 * Filter to apply to glaciers list
 */
export interface GeodataGlacierListFilter {
    /** Parent object: mountain ranges, countries, etc. If empty list, filter will not be applied */
    parent_id?: number[];
}

/**
 * Filter to apply to country regions list
 */
export interface GeodataCountryRegionListFilter {
    /** Parent object: mountain ranges, countries, etc. If empty list, filter will not be applied */
    parent_id?: number[];
}

/**
 * Filter to apply to countries list
 */
export interface GeodataCountryListFilter {
    /** Parent object: mountain ranges, countries, etc. If empty list, filter will not be applied */
    parent_id?: number[];
}

/**
 * Current user information
 */
export interface CurrentUserInfoResponse {
    /** When user was created */
    create_date: string;
    /** Internal user ID */
    id: number;
    /**
     * When authenticated user used API last time
     * @nullable
     */
    last_seen_date?: string | null;
    /** User person */
    person: string;
    /** Username */
    username: string;
}

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary Returns current user information
 */
export const currentUserInfo = (options?: SecondParameter<typeof createInstance>) => {
    return createInstance<CurrentUserInfoResponse>(
        { url: `/v1/current_user`, method: "GET" },
        options,
    );
};

/**
 * @summary Returns list of geodata objects
 */
export const objectList = (
    params?: ObjectListParams,
    options?: SecondParameter<typeof createInstance>,
) => {
    return createInstance<GeodataApiApiResponseTypesGeodataObjectResponse[]>(
        { url: `/v1/geodata`, method: "GET", params },
        options,
    );
};

/**
 * @summary Returns list of countries
 */
export const countriesList = (
    params: CountriesListParams,
    options?: SecondParameter<typeof createInstance>,
) => {
    return createInstance<GeodataApiApiResponseTypesGeodataCountryResponse[]>(
        { url: `/v1/geodata_country`, method: "GET", params },
        options,
    );
};

/**
 * @summary Returns country information
 */
export const country = (
    id: number,
    params?: CountryParams,
    options?: SecondParameter<typeof createInstance>,
) => {
    return createInstance<GeodataApiApiResponseTypesGeodataCountryResponse>(
        { url: `/v1/geodata_country/${id}`, method: "GET", params },
        options,
    );
};

/**
 * @summary Returns list of countries regions
 */
export const countryRegionsList = (
    params: CountryRegionsListParams,
    options?: SecondParameter<typeof createInstance>,
) => {
    return createInstance<GeodataApiApiResponseTypesGeodataCountryRegionResponse[]>(
        { url: `/v1/geodata_countryregion`, method: "GET", params },
        options,
    );
};

/**
 * @summary Returns country region information
 */
export const countryRegion = (
    id: number,
    params?: CountryRegionParams,
    options?: SecondParameter<typeof createInstance>,
) => {
    return createInstance<GeodataApiApiResponseTypesGeodataCountryResponse>(
        { url: `/v1/geodata_countryregion/${id}`, method: "GET", params },
        options,
    );
};

/**
 * @summary Returns list of glaciers
 */
export const glaciersList = (
    params: GlaciersListParams,
    options?: SecondParameter<typeof createInstance>,
) => {
    return createInstance<GeodataApiApiResponseTypesGeodataGlacierResponse[]>(
        { url: `/v1/geodata_glacier`, method: "GET", params },
        options,
    );
};

/**
 * @summary Returns glacier information
 */
export const glacier = (
    id: number,
    params?: GlacierParams,
    options?: SecondParameter<typeof createInstance>,
) => {
    return createInstance<GeodataApiApiResponseTypesGeodataGlacierResponse>(
        { url: `/v1/geodata_glacier/${id}`, method: "GET", params },
        options,
    );
};

/**
 * @summary Returns list of mountains
 */
export const mountainsList = (
    params: MountainsListParams,
    options?: SecondParameter<typeof createInstance>,
) => {
    return createInstance<GeodataApiApiResponseTypesGeodataMountainResponse[]>(
        { url: `/v1/geodata_mountain`, method: "GET", params },
        options,
    );
};

/**
 * @summary Returns mountain information
 */
export const mountain = (
    id: number,
    params?: MountainParams,
    options?: SecondParameter<typeof createInstance>,
) => {
    return createInstance<GeodataApiApiResponseTypesGeodataMountainResponse>(
        { url: `/v1/geodata_mountain/${id}`, method: "GET", params },
        options,
    );
};

/**
 * @summary Returns list of mountain passes
 */
export const mountainPassesList = (
    params: MountainPassesListParams,
    options?: SecondParameter<typeof createInstance>,
) => {
    return createInstance<GeodataApiApiResponseTypesGeodataMountainPassResponse[]>(
        { url: `/v1/geodata_mountainpass`, method: "GET", params },
        options,
    );
};

/**
 * @summary Returns mountain pass information
 */
export const mountainPass = (
    id: number,
    params?: MountainPassParams,
    options?: SecondParameter<typeof createInstance>,
) => {
    return createInstance<GeodataApiApiResponseTypesGeodataMountainPassResponse>(
        { url: `/v1/geodata_mountainpass/${id}`, method: "GET", params },
        options,
    );
};

/**
 * @summary Returns list of mountain ranges which belongs to the toplevel or specified mountain range
 */
export const mountainRangesList = (
    params: MountainRangesListParams,
    options?: SecondParameter<typeof createInstance>,
) => {
    return createInstance<GeodataApiApiResponseTypesGeodataMountainRangeResponse[]>(
        { url: `/v1/geodata_mountainrange`, method: "GET", params },
        options,
    );
};

/**
 * @summary Returns mountain range information
 */
export const mountainRange = (
    id: number,
    params?: MountainRangeParams,
    options?: SecondParameter<typeof createInstance>,
) => {
    return createInstance<GeodataApiApiResponseTypesGeodataMountainRangeResponse>(
        { url: `/v1/geodata_mountainrange/${id}`, method: "GET", params },
        options,
    );
};

/**
 * @summary Returns list of users
 */
export const userList = (
    params?: UserListParams,
    options?: SecondParameter<typeof createInstance>,
) => {
    return createInstance<UserListResponse[]>({ url: `/v1/user`, method: "GET", params }, options);
};

/**
 * @summary Returns user information
 */
export const userInfo = (userId: number, options?: SecondParameter<typeof createInstance>) => {
    return createInstance<UserInfoResponse[]>(
        { url: `/v1/user/${userId}`, method: "GET" },
        options,
    );
};

/**
 * @summary Deletes current session of user
 */
export const logout = (options?: SecondParameter<typeof createInstance>) => {
    return createInstance<ReactAdminOKResponse>(
        { url: `/v1/user_logout`, method: "POST" },
        options,
    );
};

export type CurrentUserInfoResult = NonNullable<Awaited<ReturnType<typeof currentUserInfo>>>;
export type ObjectListResult = NonNullable<Awaited<ReturnType<typeof objectList>>>;
export type CountriesListResult = NonNullable<Awaited<ReturnType<typeof countriesList>>>;
export type CountryResult = NonNullable<Awaited<ReturnType<typeof country>>>;
export type CountryRegionsListResult = NonNullable<Awaited<ReturnType<typeof countryRegionsList>>>;
export type CountryRegionResult = NonNullable<Awaited<ReturnType<typeof countryRegion>>>;
export type GlaciersListResult = NonNullable<Awaited<ReturnType<typeof glaciersList>>>;
export type GlacierResult = NonNullable<Awaited<ReturnType<typeof glacier>>>;
export type MountainsListResult = NonNullable<Awaited<ReturnType<typeof mountainsList>>>;
export type MountainResult = NonNullable<Awaited<ReturnType<typeof mountain>>>;
export type MountainPassesListResult = NonNullable<Awaited<ReturnType<typeof mountainPassesList>>>;
export type MountainPassResult = NonNullable<Awaited<ReturnType<typeof mountainPass>>>;
export type MountainRangesListResult = NonNullable<Awaited<ReturnType<typeof mountainRangesList>>>;
export type MountainRangeResult = NonNullable<Awaited<ReturnType<typeof mountainRange>>>;
export type UserListResult = NonNullable<Awaited<ReturnType<typeof userList>>>;
export type UserInfoResult = NonNullable<Awaited<ReturnType<typeof userInfo>>>;
export type LogoutResult = NonNullable<Awaited<ReturnType<typeof logout>>>;
